// tslint:disable
/**
 * Symptom Tracker Patient API
 * This is the Patient\'s Client API for the Symptom Tracker
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import {Configuration} from './configuration';
import globalAxios, {AxiosPromise, AxiosInstance} from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError} from './base';

/**
 *
 * @export
 * @interface PatientCreateRequest
 */
export interface PatientCreateRequest {
  /**
   *
   * @type {string}
   * @memberof PatientCreateRequest
   */
  name: string;
  /**
   *
   * @type {number}
   * @memberof PatientCreateRequest
   */
  age: number;
  /**
   *
   * @type {string}
   * @memberof PatientCreateRequest
   */
  gender: string;
  /**
   *
   * @type {string}
   * @memberof PatientCreateRequest
   */
  city: string;
}

/**
 *
 * @export
 * @interface PatientModel
 */
export interface PatientModel {
  /**
   *
   * @type {string}
   * @memberof PatientModel
   */
  _id?: string;
  /**
   *
   * @type {string}
   * @memberof PatientModel
   */
  linkedCode?: string;
  /**
   *
   * @type {string}
   * @memberof PatientModel
   */
  name?: string;
  /**
   *
   * @type {number}
   * @memberof PatientModel
   */
  age?: number;
  /**
   *
   * @type {string}
   * @memberof PatientModel
   */
  gender?: string;
  /**
   *
   * @type {string}
   * @memberof PatientModel
   */
  city?: string;
  /**
   *
   * @type {Array<RelatedAttribute>}
   * @memberof PatientModel
   */
  relatedAttributes?: Array<RelatedAttribute>;
  /**
   *
   * @type {Array<SymptomJourneyModel>}
   * @memberof PatientModel
   */
  symptomJourney?: Array<SymptomJourneyModel>;
  /**
   *
   * @type {Boolean}
   * @memberof PatientModel
   */
  smoker?: boolean;
  /**
   *
   * @type {Boolean}
   * @memberof PatientModel
   */
  geo_risk?: boolean;
  /**
   *
   * @type {Boolean}
   * @memberof PatientModel
   */
  contact_risk?: boolean;
  /**
   *
   * @type {Date}
   * @memberof PatientModel
   */
  contact_date?: Date;
  /**
   *
   * @type {string}
   * @memberof PatientModel
   */
  work?: String;
  /**
   *
   * @type {string[]}
   * @memberof PatientModel
   */
  preexisting_conditions?: string[];
  /**
   *
   * @type {Boolean}
   * @memberof PatientModel
   */
  immunal_suppressors?: Boolean;
  /**
   *
   * @type {Boolean}
   * @memberof PatientModel
   */
  pregnant?: Boolean;
}

/**
 *
 * @export
 * @interface RelatedAttribute
 */
export interface RelatedAttribute {
  /**
   *
   * @type {string}
   * @memberof RelatedAttribute
   */
  Type?: string;
  /**
   *
   * @type {string}
   * @memberof RelatedAttribute
   */
  Value?: string;
}

/**
 *
 * @export
 * @interface SymptomCatalogueItem
 */
export interface SymptomCatalogueItem {
  /**
   *
   * @type {string}
   * @memberof SymptomCatalogueItem
   */
  Category: string;
  /**
   *
   * @type {string}
   * @memberof SymptomCatalogueItem
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof SymptomCatalogueItem
   */
  toolTip: string;
  /**
   *
   * @type {Array<string>}
   * @memberof SymptomCatalogueItem
   */
  symptomSeverity: Array<string>;
}

/**
 *
 * @export
 * @interface SymptomJourneyModel
 */
export interface SymptomJourneyModel {
  /**
   *
   * @type {string}
   * @memberof SymptomJourneyModel
   */
  Category: string;
  /**
   *
   * @type {string}
   * @memberof SymptomJourneyModel
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof SymptomJourneyModel
   */
  symptomSeverity: string;
  /**
   *
   * @type {string}
   * @memberof SymptomJourneyModel
   */
  comment?: string;
  /**
   *
   * @type {string}
   * @memberof SymptomJourneyModel
   */
  createdAt?: string;
}

/**
 * MessageApi - axios parameter creator
 * @export
 */
export const MessageApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary send email to list of patients specified by list of id
     * @param {Array<number>} ids list of patient ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    messagePatients(ids: Array<number>, options: any = {}): RequestArgs {
      // verify required parameter 'ids' is not null or undefined
      if (ids === null || ids === undefined) {
        throw new RequiredError('ids', 'Required parameter ids was null or undefined when calling messagePatients.');
      }
      const localVarPath = `/messagePatients`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (ids) {
        localVarQueryParameter['_ids'] = ids;
      }


      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  }
};

/**
 * MessageApi - functional programming interface
 * @export
 */
export const MessageApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary send email to list of patients specified by list of id
     * @param {Array<number>} ids list of patient ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    messagePatients(ids: Array<number>, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
      const localVarAxiosArgs = MessageApiAxiosParamCreator(configuration).messagePatients(ids, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
  }
};

/**
 * MessageApi - factory interface
 * @export
 */
export const MessageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
     *
     * @summary send email to list of patients specified by list of id
     * @param {Array<number>} ids list of patient ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    messagePatients(ids: Array<number>, options?: any): AxiosPromise<void> {
      return MessageApiFp(configuration).messagePatients(ids, options)(axios, basePath);
    },
  };
};

/**
 * MessageApi - object-oriented interface
 * @export
 * @class MessageApi
 * @extends {BaseAPI}
 */
export class MessageApi extends BaseAPI {
  /**
   *
   * @summary send email to list of patients specified by list of id
   * @param {Array<number>} ids list of patient ids
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageApi
   */
  public messagePatients(ids: Array<number>, options?: any) {
    return MessageApiFp(this.configuration).messagePatients(ids, options)(this.axios, this.basePath);
  }

}


/**
 * PatientApi - axios parameter creator
 * @export
 */
export const PatientApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create new patient
     * @param {PatientCreateRequest} body Describing the new patient
     * @param {number} [invitationCode] Invitation Code of the Health Department
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addNewPatient(body: PatientCreateRequest, invitationCode?: number, options: any = {}): RequestArgs {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError('body', 'Required parameter body was null or undefined when calling addNewPatient.');
      }
      const localVarPath = `/patient`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (invitationCode !== undefined) {
        localVarQueryParameter['invitationCode'] = invitationCode;
      }


      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a corresponding patient
     * @param {string} id Id of the Patient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPatient(id: string, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling getPatient.');
      }
      const localVarPath = `/patient/{_id}`
        .replace(`{${"_id"}}`, encodeURIComponent(String(id)));
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Patch a current Patient
     * @param {string} id Id of the Patient
     * @param {PatientModel} body Representation of the current patient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchPatient(id: string, body: PatientModel, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling patchPatient.');
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError('body', 'Required parameter body was null or undefined when calling patchPatient.');
      }
      const localVarPath = `/patient/{_id}`
        .replace(`{${"_id"}}`, encodeURIComponent(String(id)));
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {method: 'PATCH', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a filtered list of patients
     * @param {boolean} [highRisk] whether the Patient is at Risk
     * @param {number} [inactive] whether the Patient has been inactive for more than x hours
     * @param {number} [minAge] minimum age of patients
     * @param {number} [maxAge] maximum age of patients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryPatients(highRisk?: boolean, inactive?: number, minAge?: number, maxAge?: number, options: any = {}): RequestArgs {
      const localVarPath = `/patient`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (highRisk !== undefined) {
        localVarQueryParameter['highRisk'] = highRisk;
      }

      if (inactive !== undefined) {
        localVarQueryParameter['inactive'] = inactive;
      }

      if (minAge !== undefined) {
        localVarQueryParameter['minAge'] = minAge;
      }

      if (maxAge !== undefined) {
        localVarQueryParameter['maxAge'] = maxAge;
      }


      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  }
};

/**
 * PatientApi - functional programming interface
 * @export
 */
export const PatientApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create new patient
     * @param {PatientCreateRequest} body Describing the new patient
     * @param {number} [invitationCode] Invitation Code of the Health Department
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addNewPatient(body: PatientCreateRequest, invitationCode?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatientModel> {
      const localVarAxiosArgs = PatientApiAxiosParamCreator(configuration).addNewPatient(body, invitationCode, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get a corresponding patient
     * @param {string} id Id of the Patient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPatient(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatientModel> {
      const localVarAxiosArgs = PatientApiAxiosParamCreator(configuration).getPatient(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Patch a current Patient
     * @param {string} id Id of the Patient
     * @param {PatientModel} body Representation of the current patient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchPatient(id: string, body: PatientModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatientModel> {
      const localVarAxiosArgs = PatientApiAxiosParamCreator(configuration).patchPatient(id, body, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get a filtered list of patients
     * @param {boolean} [highRisk] whether the Patient is at Risk
     * @param {number} [inactive] whether the Patient has been inactive for more than x hours
     * @param {number} [minAge] minimum age of patients
     * @param {number} [maxAge] maximum age of patients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryPatients(highRisk?: boolean, inactive?: number, minAge?: number, maxAge?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PatientModel>> {
      const localVarAxiosArgs = PatientApiAxiosParamCreator(configuration).queryPatients(highRisk, inactive, minAge, maxAge, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
  }
};

/**
 * PatientApi - factory interface
 * @export
 */
export const PatientApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
     *
     * @summary Create new patient
     * @param {PatientCreateRequest} body Describing the new patient
     * @param {number} [invitationCode] Invitation Code of the Health Department
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addNewPatient(body: PatientCreateRequest, invitationCode?: number, options?: any): AxiosPromise<PatientModel> {
      return PatientApiFp(configuration).addNewPatient(body, invitationCode, options)(axios, basePath);
    },
    /**
     *
     * @summary Get a corresponding patient
     * @param {string} id Id of the Patient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPatient(id: string, options?: any): AxiosPromise<PatientModel> {
      return PatientApiFp(configuration).getPatient(id, options)(axios, basePath);
    },
    /**
     *
     * @summary Patch a current Patient
     * @param {string} id Id of the Patient
     * @param {PatientModel} body Representation of the current patient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchPatient(id: string, body: PatientModel, options?: any): AxiosPromise<PatientModel> {
      return PatientApiFp(configuration).patchPatient(id, body, options)(axios, basePath);
    },
    /**
     *
     * @summary Get a filtered list of patients
     * @param {boolean} [highRisk] whether the Patient is at Risk
     * @param {number} [inactive] whether the Patient has been inactive for more than x hours
     * @param {number} [minAge] minimum age of patients
     * @param {number} [maxAge] maximum age of patients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryPatients(highRisk?: boolean, inactive?: number, minAge?: number, maxAge?: number, options?: any): AxiosPromise<Array<PatientModel>> {
      return PatientApiFp(configuration).queryPatients(highRisk, inactive, minAge, maxAge, options)(axios, basePath);
    },
  };
};

/**
 * PatientApi - object-oriented interface
 * @export
 * @class PatientApi
 * @extends {BaseAPI}
 */
export class PatientApi extends BaseAPI {
  /**
   *
   * @summary Create new patient
   * @param {PatientCreateRequest} body Describing the new patient
   * @param {number} [invitationCode] Invitation Code of the Health Department
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PatientApi
   */
  public addNewPatient(body: PatientCreateRequest, invitationCode?: number, options?: any) {
    return PatientApiFp(this.configuration).addNewPatient(body, invitationCode, options)(this.axios, this.basePath);
  }

  /**
   *
   * @summary Get a corresponding patient
   * @param {string} id Id of the Patient
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PatientApi
   */
  public getPatient(id: string, options?: any) {
    return PatientApiFp(this.configuration).getPatient(id, options)(this.axios, this.basePath);
  }

  /**
   *
   * @summary Patch a current Patient
   * @param {string} id Id of the Patient
   * @param {PatientModel} body Representation of the current patient
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PatientApi
   */
  public patchPatient(id: string, body: PatientModel, options?: any) {
    return PatientApiFp(this.configuration).patchPatient(id, body, options)(this.axios, this.basePath);
  }

  /**
   *
   * @summary Get a filtered list of patients
   * @param {boolean} [highRisk] whether the Patient is at Risk
   * @param {number} [inactive] whether the Patient has been inactive for more than x hours
   * @param {number} [minAge] minimum age of patients
   * @param {number} [maxAge] maximum age of patients
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PatientApi
   */
  public queryPatients(highRisk?: boolean, inactive?: number, minAge?: number, maxAge?: number, options?: any) {
    return PatientApiFp(this.configuration).queryPatients(highRisk, inactive, minAge, maxAge, options)(this.axios, this.basePath);
  }

}


/**
 * QuestionaireApi - axios parameter creator
 * @export
 */
export const QuestionaireApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary get catalogue questsions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalogueItems(options: any = {}): RequestArgs {
      const localVarPath = `/catalogue`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add a new catalogue questsion
     * @param {Array<SymptomCatalogueItem>} body Representation of the current patient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCatalogueQuestion(body: Array<SymptomCatalogueItem>, options: any = {}): RequestArgs {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError('body', 'Required parameter body was null or undefined when calling putCatalogueQuestion.');
      }
      const localVarPath = `/catalogue`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  }
};

/**
 * QuestionaireApi - functional programming interface
 * @export
 */
export const QuestionaireApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary get catalogue questsions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalogueItems(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SymptomCatalogueItem>> {
      const localVarAxiosArgs = QuestionaireApiAxiosParamCreator(configuration).getCatalogueItems(options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Add a new catalogue questsion
     * @param {Array<SymptomCatalogueItem>} body Representation of the current patient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCatalogueQuestion(body: Array<SymptomCatalogueItem>, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SymptomCatalogueItem>> {
      const localVarAxiosArgs = QuestionaireApiAxiosParamCreator(configuration).putCatalogueQuestion(body, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
  }
};

/**
 * QuestionaireApi - factory interface
 * @export
 */
export const QuestionaireApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
     *
     * @summary get catalogue questsions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalogueItems(options?: any): AxiosPromise<Array<SymptomCatalogueItem>> {
      return QuestionaireApiFp(configuration).getCatalogueItems(options)(axios, basePath);
    },
    /**
     *
     * @summary Add a new catalogue questsion
     * @param {Array<SymptomCatalogueItem>} body Representation of the current patient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCatalogueQuestion(body: Array<SymptomCatalogueItem>, options?: any): AxiosPromise<Array<SymptomCatalogueItem>> {
      return QuestionaireApiFp(configuration).putCatalogueQuestion(body, options)(axios, basePath);
    },
  };
};

/**
 * QuestionaireApi - object-oriented interface
 * @export
 * @class QuestionaireApi
 * @extends {BaseAPI}
 */
export class QuestionaireApi extends BaseAPI {
  /**
   *
   * @summary get catalogue questsions
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionaireApi
   */
  public getCatalogueItems(options?: any) {
    return QuestionaireApiFp(this.configuration).getCatalogueItems(options)(this.axios, this.basePath);
  }

  /**
   *
   * @summary Add a new catalogue questsion
   * @param {Array<SymptomCatalogueItem>} body Representation of the current patient
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionaireApi
   */
  public putCatalogueQuestion(body: Array<SymptomCatalogueItem>, options?: any) {
    return QuestionaireApiFp(this.configuration).putCatalogueQuestion(body, options)(this.axios, this.basePath);
  }

}


/**
 * ReportApi - axios parameter creator
 * @export
 */
export const ReportApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary generate report
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReport(options: any = {}): RequestArgs {
      const localVarPath = `/report`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  }
};

/**
 * ReportApi - functional programming interface
 * @export
 */
export const ReportApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary generate report
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReport(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
      const localVarAxiosArgs = ReportApiAxiosParamCreator(configuration).getReport(options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
  }
};

/**
 * ReportApi - factory interface
 * @export
 */
export const ReportApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
     *
     * @summary generate report
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReport(options?: any): AxiosPromise<void> {
      return ReportApiFp(configuration).getReport(options)(axios, basePath);
    },
  };
};

/**
 * ReportApi - object-oriented interface
 * @export
 * @class ReportApi
 * @extends {BaseAPI}
 */
export class ReportApi extends BaseAPI {
  /**
   *
   * @summary generate report
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportApi
   */
  public getReport(options?: any) {
    return ReportApiFp(this.configuration).getReport(options)(this.axios, this.basePath);
  }

}


/**
 * SymptomsApi - axios parameter creator
 * @export
 */
export const SymptomsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Add a new
     * @param {string} id ID patient
     * @param {Array<SymptomJourneyModel>} body Representation of the current patient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addNewSymptoms(id: string, body: Array<SymptomJourneyModel>, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling addNewSymptoms.');
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError('body', 'Required parameter body was null or undefined when calling addNewSymptoms.');
      }
      const localVarPath = `/patient/{_id}/symptom`
        .replace(`{${"_id"}}`, encodeURIComponent(String(id)));
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get Symptoms
     * @param {string} id ID patient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllSymptoms(id: string, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling getAllSymptoms.');
      }
      const localVarPath = `/patient/{_id}/symptom`
        .replace(`{${"_id"}}`, encodeURIComponent(String(id)));
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  }
};

/**
 * SymptomsApi - functional programming interface
 * @export
 */
export const SymptomsApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Add a new
     * @param {string} id ID patient
     * @param {Array<SymptomJourneyModel>} body Representation of the current patient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addNewSymptoms(id: string, body: Array<SymptomJourneyModel>, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
      const localVarAxiosArgs = SymptomsApiAxiosParamCreator(configuration).addNewSymptoms(id, body, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get Symptoms
     * @param {string} id ID patient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllSymptoms(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SymptomJourneyModel>> {
      const localVarAxiosArgs = SymptomsApiAxiosParamCreator(configuration).getAllSymptoms(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
  }
};

/**
 * SymptomsApi - factory interface
 * @export
 */
export const SymptomsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
     *
     * @summary Add a new
     * @param {string} id ID patient
     * @param {Array<SymptomJourneyModel>} body Representation of the current patient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addNewSymptoms(id: string, body: Array<SymptomJourneyModel>, options?: any): AxiosPromise<void> {
      return SymptomsApiFp(configuration).addNewSymptoms(id, body, options)(axios, basePath);
    },
    /**
     *
     * @summary Get Symptoms
     * @param {string} id ID patient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllSymptoms(id: string, options?: any): AxiosPromise<Array<SymptomJourneyModel>> {
      return SymptomsApiFp(configuration).getAllSymptoms(id, options)(axios, basePath);
    },
  };
};

/**
 * SymptomsApi - object-oriented interface
 * @export
 * @class SymptomsApi
 * @extends {BaseAPI}
 */
export class SymptomsApi extends BaseAPI {
  /**
   *
   * @summary Add a new
   * @param {string} id ID patient
   * @param {Array<SymptomJourneyModel>} body Representation of the current patient
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SymptomsApi
   */
  public addNewSymptoms(id: string, body: Array<SymptomJourneyModel>, options?: any) {
    return SymptomsApiFp(this.configuration).addNewSymptoms(id, body, options)(this.axios, this.basePath);
  }

  /**
   *
   * @summary Get Symptoms
   * @param {string} id ID patient
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SymptomsApi
   */
  public getAllSymptoms(id: string, options?: any) {
    return SymptomsApiFp(this.configuration).getAllSymptoms(id, options)(this.axios, this.basePath);
  }

}


